@{
    ViewBag.Title = "Home Page";
}

@using PagedList;
@using PagedList.Mvc;
@using Library.Domain.Core.Models
@model IPagedList<Book>


@*<input class="form-control" id="myInput" type="text" placeholder="Search by Name/Author">*@
@using (Html.BeginForm("Index", "Home", FormMethod.Get))
{
    @Html.TextBox("search", String.Empty, new { @class = "form-control", @placeholder = "Search by Name/Author", @value = "search" });
}

@{

}

<table class="table table-striped">
    <thead>
        <tr>
            <th>


                @using (Html.BeginForm("Index", "Home", FormMethod.Get))
                {
                    @Html.ActionLink("Name", "Index", new { page = Request.QueryString["page"], search = Request.QueryString["Search"], orderBy = "Name", orderDirection = ViewBag.PreviosOrderDirection == "asc" && ViewBag.PreviosOrderBy == "Name" ? "desc" : "asc" })

                    if (ViewBag.PreviosOrderBy == "Name")
                    {
                        if (ViewBag.PreviosOrderDirection == "asc")
                        {
                            <span class="glyphicon glyphicon-sort-by-alphabet"></span>
                        }
                        else
                        {
                            <span class="glyphicon glyphicon-sort-by-alphabet-alt"></span>
                        }
                    }
                }
            </th>
            <th>
                @using (Html.BeginForm("Index", "Home", FormMethod.Get))
                {
                    @Html.ActionLink("Author", "Index", new { page = Request.QueryString["page"], search = Request.QueryString["Search"], orderBy = "Author", orderDirection = ViewBag.PreviosOrderDirection == "asc" && ViewBag.PreviosOrderBy == "Author" ? "desc" : "asc" })

                    if (ViewBag.PreviosOrderBy == "Author")
                    {
                        if (ViewBag.PreviosOrderDirection == "asc")
                        {
                            <span class="glyphicon glyphicon-sort-by-alphabet"></span>
                        }
                        else
                        {
                            <span class="glyphicon glyphicon-sort-by-alphabet-alt"></span>
                        }
                    }
                }
            </th>
            <th>
                @using (Html.BeginForm("Index", "Home", FormMethod.Get))
                {
                    @Html.ActionLink("Publisher", "Index", new { page = Request.QueryString["page"], search = Request.QueryString["Search"], orderBy = "Publisher", orderDirection = ViewBag.PreviosOrderDirection == "asc" && ViewBag.PreviosOrderBy == "Publisher" ? "desc" : "asc" })

                    if (ViewBag.PreviosOrderBy == "Publisher")
                    {
                        if (ViewBag.PreviosOrderDirection == "asc")
                        {
                            <span class="glyphicon glyphicon-sort-by-alphabet"></span>
                        }
                        else
                        {
                            <span class="glyphicon glyphicon-sort-by-alphabet-alt"></span>
                        }
                    }
                }
            </th>
            <th>
                @using (Html.BeginForm("Index", "Home", FormMethod.Get))
                {
                    @Html.ActionLink("Year", "Index", new { page = Request.QueryString["page"], search = Request.QueryString["Search"], orderBy = "PublicationDate", orderDirection = ViewBag.PreviosOrderDirection == "asc" && ViewBag.PreviosOrderBy == "PublicationDate" ? "desc" : "asc" })

                    if (ViewBag.PreviosOrderBy == "PublicationDate")
                    {
                        if (ViewBag.PreviosOrderDirection == "asc")
                        {
                            <span class="glyphicon glyphicon-sort-by-order"></span>
                        }
                        else
                        {
                            <span class="glyphicon glyphicon-sort-by-order-alt"></span>
                        }
                    }
                }
            </th>
            <th>
                @Html.ActionLink("Count", "Index", new { page = Request.QueryString["page"], search = Request.QueryString["Search"], orderBy = "Count", orderDirection = ViewBag.PreviosOrderDirection == "asc" && ViewBag.PreviosOrderBy == "Count" ? "desc" : "asc" })
                @if (ViewBag.PreviosOrderBy == "Count")
                {
                    if (ViewBag.PreviosOrderDirection == "asc")
                    {
                        <span class="glyphicon glyphicon-sort-by-order"></span>
                    }
                    else
                    {
                        <span class="glyphicon glyphicon-sort-by-order-alt"></span>
                    }
                }

            </th>
            <th></th>
        </tr>
    </thead>

    <tbody id="myTable">
        @if (Model.Count() == 0)
        {
            <tr>No match</tr>
        }
        else
        {
            foreach (var item in Model)
            {
                <tr>
                    <td>
                        @item.Name
                    </td>
                    <td>
                        @(String.Join(", ", item.Authors.OrderBy(a => a.Name).Select(x => x.Name)))
                    </td>
                    <td>
                        @item.Publisher.Name
                    </td>
                    <td>
                        @item.PublicationDate.Year
                    </td>
                    <td>
                        @item.Count
                    </td>
                    <td>
                        @Html.ActionLink("Details", "Details", new { bookId = item.Id }, new { @class = "btn btn-info" })

                        @if (!(HttpContext.Current.User.IsInRole("Administrator") ||
                            HttpContext.Current.User.IsInRole("Librarian")))
                        {
                            if (item.Count == 0)
                            {
                                <button class="btn btn-danger" disabled="disabled" title="Temporarily unavailable">Order</button>
                            }
                            else
                            {
                                @Html.ActionLink("Order", "CreateOrder", new { bookId = item.Id }, new { @class = "btn btn-success" })
                            }
                        }
                    </td>

                </tr>
            }
        }
    </tbody>
</table>

<div class="text-center">
    @Html.PagedListPager(Model, page => Url.Action("Index", new { page, search = Request.QueryString["search"], orderBy = Request.QueryString["orderBy"] }), new PagedListRenderOptions() { Display = PagedListDisplayMode.IfNeeded, DisplayPageCountAndCurrentLocation = true, DisplayItemSliceAndTotal = true })
</div>

<!-- Modal -->
<div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLongTitle">Modal title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                ...
            </div>
            <div class="modal-footer">
                <button id="order_1" onclick="order(false)" type="button" class="btn btn-primary">Order 1</button>
                <button id="order_2" onclick="order(true)" type="button" class="btn btn-primary">Order 2</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


<script>

    var bookId;
    var status;

    function func(e) {
        bookId = e;
    }

    function order(status) {
        debugger
        $.ajax({
            type: "POST",
            url: "/Orders/OrderBook",
            data: {
                bookId,
                isAtReadingRoom: status
            },
            success: function (result) {
                debugger;
                let countOfBook = document.getElementById(bookId);
                countOfBook.innerText -= 1;
            },
            error: function (response) {
                debugger;
            },
        });
    }

</script>